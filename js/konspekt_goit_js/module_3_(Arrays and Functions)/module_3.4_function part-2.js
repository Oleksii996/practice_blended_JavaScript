//#region Псевдомасив arguments

// Доступ до списку всіх аргументів можна отримати за допомогою спеціальної змінної arguments. Коли ти викликаєш функцію з аргументами, arguments автоматично створюється всередині цієї функції і заповнюється переданими значеннями аргументів.
{
  function sum(a, b) {
    console.log(arguments);
    return a + b;
  }

  sum(2, 5);
}

//Розгляньмо приклад використання arguments у функції, яка повертає результат множення будь-якої кількості аргументів.
{
  function multiply() {
    let total = 1;

    for (const arg of arguments) {
      total *= arg;
    }

    return total;
  }

  console.log(multiply(1, 2, 3)); //  6
  console.log(multiply(1, 2, 3, 4)); //  24
  console.log(multiply(1, 2, 3, 4, 5)); //  120
}

//Якщо під час роботи з arguments потрібно використовувати методи масиву, тоді псевдомасив необхідно перетворити на масив, використовуючи метод Array.from(), який створить масив із псевдомасиву.
{
  function foo() {
    // У змінній args буде повноцінний масив з усіх аргументів
    const args = Array.from(arguments);
    return args.join("-");
  }

  foo(1, 2, 3); // Поверне "1-2-3"
}

//Приколад-функцію
// Функція createReversedArray() може приймати довільну кількість аргументів. Доповни код функції так, щоб вона повертала масив усіх аргументів, але в масиві вони повинні йти у зворотному порядку. Тобто, при виклику createReversedArray(1, 2, 3), функція має повернути масив [3, 2, 1]. Використовуй цикл або метод масиву toReversed(), який застосовується до масиву і результатом роботи повертає новий масив з елементами у зворотньому порядку.
{
  function createReversedArray() {}
}
//#endregion
